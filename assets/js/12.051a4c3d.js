(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{522:function(t,s,a){t.exports=a.p+"assets/img/browser4.871323ed.png"},567:function(t,s,a){t.exports=a.p+"assets/img/browser1.ef6d2b79.png"},568:function(t,s,a){t.exports=a.p+"assets/img/browser2.b17bc709.png"},569:function(t,s,a){t.exports=a.p+"assets/img/browaer3.ff41698c.png"},570:function(t,s,a){t.exports=a.p+"assets/img/cache.ccf8dc23.png"},682:function(t,s,a){"use strict";a.r(s);var _=a(13),v=Object(_.a)({},(function(){var t=this,s=t.$createElement,_=t._self._c||s;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"浏览器的渲染原理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#浏览器的渲染原理"}},[t._v("#")]),t._v(" 浏览器的渲染原理")]),t._v(" "),_("p",[t._v("一道经典的面试题，从输入URL到页面展现的过程：")]),t._v(" "),_("p",[t._v("浏览器的生命周期：")]),t._v(" "),_("p",[_("img",{attrs:{src:a(567),alt:"浏览器的生命周期"}})]),t._v(" "),_("p",[t._v("总结为以下几个阶段：")]),t._v(" "),_("ul",[_("li",[t._v("浏览器接收到url到网络请求线程的开启")]),t._v(" "),_("li",[t._v("一个完整的HTTP请求的发出")]),t._v(" "),_("li",[t._v("服务器接收到请求并转到具体的处理后台")]),t._v(" "),_("li",[t._v("前后台之间的HTTP请求交互和涉及到的缓存")]),t._v(" "),_("li",[t._v("浏览器接收到数据包后的关键渲染路径")]),t._v(" "),_("li",[t._v("JS引擎的解析过程")])]),t._v(" "),_("h2",{attrs:{id:"_1-浏览器接收到url到请求线程的开启"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-浏览器接收到url到请求线程的开启"}},[t._v("#")]),t._v(" 1. 浏览器接收到URL到请求线程的开启")]),t._v(" "),_("h3",{attrs:{id:"进程与线程的相关"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#进程与线程的相关"}},[t._v("#")]),t._v(" 进程与线程的相关：")]),t._v(" "),_("ul",[_("li",[t._v("进程是操作系统分配资源的最小单位，线程是程序执行的最小单位。")]),t._v(" "),_("li",[t._v("只要某个线程执行出错，将会导致成个进程崩溃")]),t._v(" "),_("li",[t._v("一个进程由一个或多个线程组成，线程是一个进程中代码的不同执行路线；")]),t._v(" "),_("li",[t._v("进程之间相互独立，但同一进程下的各个线程之间共享程序的内存空间(包括代码段、数据集、堆等)及一些进程级的资源(如打开文件和信号)。")]),t._v(" "),_("li",[t._v("调度和切换：线程上下文切换比进程上下文切换要快得多。")]),t._v(" "),_("li",[t._v("线程之间可以共享所属进程的资源")]),t._v(" "),_("li",[t._v("进程所占资源会在其关闭后由系统收回，即使进程中某个线程产生内存泄漏")])]),t._v(" "),_("h3",{attrs:{id:"单进程的浏览器"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#单进程的浏览器"}},[t._v("#")]),t._v(" 单进程的浏览器")]),t._v(" "),_("p",[t._v("在2008年谷歌发布chrome多进程浏览器之前，市面上几乎所有的浏览器都是单进程的。")]),t._v(" "),_("ul",[_("li",[_("p",[t._v("● 不稳定：\n早期浏览器需要借助插件来实现诸如Web视频、Web游戏等各种强大的功能，但是插件是最容易出问题的模块，并且还运行在浏览器进程之中，所以一个插件的崩溃会引起整个浏览器的崩溃。除了插件以外，渲染引擎模块也是不稳定的，通常一些复杂的JavaScript代码就有可能引起渲染引擎的崩溃。和插件一样，渲染引擎的崩溃也会引起整个浏览器的崩溃。")])]),t._v(" "),_("li",[_("p",[t._v("● 不流畅：\n首先是页面内存泄漏，在打开关闭一个页面的之后，通常会有一些内存不能回首收，随着使用时间的增加，占用的内存就越多，浏览器就会越来越慢。另外假如有一个工人专门干页面渲染的活，老板为了省钱雇了一个老人，干活很慢")])]),t._v(" "),_("li",[_("p",[t._v("● 不安全：\n插件可以使用C/C++等代码编写，通过插件可以获取到操作系统的任意资源，这意味着当你在页面运行一个插件的时候这个插件可以完全操作你的电脑，如果是个恶意插件它就可以释放病毒，窃取你的账号密码，引发安全性问题。")])])]),t._v(" "),_("h3",{attrs:{id:"多进程浏览器"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#多进程浏览器"}},[t._v("#")]),t._v(" 多进程浏览器")]),t._v(" "),_("p",[t._v("最新的Chrome浏览器包含：1个浏览器主进程，1个GPU进程，1个网络进程，多个渲染进程（沙箱），和多个插件进程（沙箱）")]),t._v(" "),_("p",[_("img",{attrs:{src:a(568),alt:"多进程浏览器"}})]),t._v(" "),_("ul",[_("li",[_("strong",[t._v("浏览器主进程")]),t._v("： 负责管制浏览器除标签页外的界面，包含地址栏、书签、后退后退按钮等，以及负责与其余进程的协调工作，同时提供存储性能。")]),t._v(" "),_("li",[_("strong",[t._v("GPU进程")]),t._v("：负责整个浏览器界面的渲染。Chrome刚开始公布的时候是没有GPU进程的，而应用GPU的初衷是为了实现3D的CSS效果，后来随着网页及浏览器在界面中的使用越来越广泛，Chrome便在浏览器中加入了GPU进程。")]),t._v(" "),_("li",[_("strong",[t._v("网络进程")]),t._v("：负责发动和承受网络申请，以前是作为模块运行在浏览器进程的，后面才独立进去，成为一个独自的进程")]),t._v(" "),_("li",[_("strong",[t._v("插件进程")]),t._v("：主要是负责插件的运行，因为插件可能解体，所以须要通过插件过程来隔离，以保障插件解体也不会对浏览器和页面造成影响")]),t._v(" "),_("li",[_("strong",[t._v("渲染进程")]),t._v("：负责管制显示tab标签页内的所有内容，外围工作是将HTML、CSS、JS转为用户能够与之交互的网页，排版引擎Blink和JS引擎V8都是运行在该过程中，默认状况下Chrome会为每个Tab标签页创立一个渲染过程")])]),t._v(" "),_("h3",{attrs:{id:"渲染过程中的线程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#渲染过程中的线程"}},[t._v("#")]),t._v(" 渲染过程中的线程")]),t._v(" "),_("p",[_("img",{attrs:{src:a(569),alt:"多进程线程"}})]),t._v(" "),_("ul",[_("li",[_("p",[_("strong",[t._v("GUI渲染线程：")]),t._v(" 负责渲染页面，解析html和CSS、构建DOM树、CSSOM树、渲染树、和绘制页面，重绘重排也是在该线程执行")])]),t._v(" "),_("li",[_("p",[_("strong",[t._v("JS引擎线程：")]),t._v(" 一个tab页中只有一个JS引擎线程(单线程)，负责解析和执行JS。它GUI渲染过程不能同时执行，只能一个一个来，如果JS执行过长就会导致阻塞掉帧")])]),t._v(" "),_("li",[_("p",[_("strong",[t._v("计时器线程：")]),t._v(" 指setInterval和setTimeout，因为JS引擎是单线程的，所以如果处于阻塞状态，那么计时器就会不准了，所以须要独自的线程来负责计时器工作")])]),t._v(" "),_("li",[_("p",[_("strong",[t._v("异步http申请线程：")]),t._v(" XMLHttpRequest连贯后浏览器开的一个线程，比方申请有回调函数，异步线程就会将回调函数退出事件队列，期待JS引擎闲暇执行")])]),t._v(" "),_("li",[_("p",[_("strong",[t._v("事件触发线程：")]),t._v(" 次要用来管制事件循环，比方JS执行遇到计时器，AJAX异步申请等，就会将对应工作增加到事件触发线程中，在对应事件合乎触发条件触发时，就把事件增加到待处理队列的队尾，等JS引擎解决")])])]),t._v(" "),_("h3",{attrs:{id:"多标签之间怎么通信"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#多标签之间怎么通信"}},[t._v("#")]),t._v(" 多标签之间怎么通信？")]),t._v(" "),_("p",[t._v("没有方法间接通信，须要有一个相似中介者进行音讯的转发和接管，比方")]),t._v(" "),_("ul",[_("li",[_("p",[_("strong",[t._v("localStorage")]),t._v("：在一个标签页监听localStorage的变动，而后当另一个标签页批改的时候，能够通过监听获取新数据")])]),t._v(" "),_("li",[_("p",[_("strong",[t._v("WebSocket")]),t._v("：因为websocket能够实现实时服务器推送，所以服务器就能够来当这个中介者。标签页通过向服务器发送数据，而后服务器再向其余标签推送转发")])]),t._v(" "),_("li",[_("p",[t._v("**ShareWorker：**会在页面的生命周期内创立一个惟一的线程，并开启多个页面也只会应用同一个线程，标签页共享一个线程")])]),t._v(" "),_("li",[_("p",[_("strong",[t._v("postMessage：")])])])]),t._v(" "),_("div",{staticClass:"language-js line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-js"}},[_("code",[t._v(" "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 发送方")]),t._v("\n  window"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("parent")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("pastMessage")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token string"}},[t._v("'发送的数据'")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),_("span",{pre:!0,attrs:{class:"token string"}},[t._v("'http://接管的址'")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 接管方")]),t._v("\n  window"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("addEventListener")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token string"}},[t._v("'message'")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("e")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" data "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" e"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[t._v("1")]),_("br"),_("span",{staticClass:"line-number"},[t._v("2")]),_("br"),_("span",{staticClass:"line-number"},[t._v("3")]),_("br"),_("span",{staticClass:"line-number"},[t._v("4")]),_("br")])]),_("h3",{attrs:{id:"你晓得僵尸过程和孤儿过程吗"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#你晓得僵尸过程和孤儿过程吗"}},[t._v("#")]),t._v(" 你晓得僵尸过程和孤儿过程吗？")]),t._v(" "),_("ul",[_("li",[_("p",[_("strong",[t._v("孤儿过程：")]),t._v(" 故名思义，就是没爹的孩子。父过程退出了，而它的一个或多个过程还在运行，那么这些子过程都会成为孤儿过程。这些孤儿都将被init过程收养，并负责这些孤儿的当前")])]),t._v(" "),_("li",[_("p",[_("strong",[t._v("僵尸过程：")]),t._v(" 就是子过程比父过程先完结，而父过程又没有开释子过程占用的资源，那么子过程的形容还留在零碎中，这种过程就是僵尸过程")])])]),t._v(" "),_("h2",{attrs:{id:"_2-http请求的建立"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-http请求的建立"}},[t._v("#")]),t._v(" 2. HTTP请求的建立")]),t._v(" "),_("h3",{attrs:{id:"dns域名解析"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#dns域名解析"}},[t._v("#")]),t._v(" DNS域名解析")]),t._v(" "),_("p",[t._v("解析过程如下图：")]),t._v(" "),_("p",[_("img",{attrs:{src:a(522),alt:"解析过程"}})]),t._v(" "),_("h3",{attrs:{id:"网络模型"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#网络模型"}},[t._v("#")]),t._v(" 网络模型")]),t._v(" "),_("p",[t._v("在通过DNS解析获取到目标服务器IP地址后，就可以建立网络连接进行资源的请求与响应了。但在此之前，我们需要对网络架构模型有一些基本的认识，在互联网发展初期，为了使网络通信能够更加灵活、稳定及可互操作，国际标准化组织提出了一些网络架构模型：OSI模型、TCP/IP模型（应用层，会话层，表示层并为应用层）。")]),t._v(" "),_("p",[_("img",{attrs:{src:a(522),alt:"OSI七层模型"}})]),t._v(" "),_("h3",{attrs:{id:"tcp连接"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#tcp连接"}},[t._v("#")]),t._v(" TCP连接")]),t._v(" "),_("p",[t._v("传输层常见的协议有TCP协议和UDP协议。")]),t._v(" "),_("p",[t._v("由于TCP是面向有连接的通信协议，所以在数据传输之前需要建立好客户端与服务器端之间的连接，即通常所说的“三次握手”，具体过程分为如下步骤：")]),t._v(" "),_("ul",[_("li",[t._v("（1）客户端生成一个随机数seq，假设其值为t，并将标志位SYN设为1，将这些数据打包发给服务器端后，客户端进入等待服务器端确认的状态。")]),t._v(" "),_("li",[t._v("（2）服务器端收到客户端发来的SYN=1的数据包后，知道这是在请求建立连接，于是服务器端将SYN与ACK均置为1，并将请求包中客户端发来的随机数t加1后赋值给ack，然后生成一个服务器端的随机数seq=k，完成这些操作后，服务器端将这些数据打包再发回给客户端，作为对客户端建立连接请求的确认应答。")]),t._v(" "),_("li",[t._v("（3）客户端收到服务器端的确认应答后，检查数据包中ack的字段值是否为t+1，ACK是否等于1，若都正确就将服务器端发来的随机数加1（ack=k+1），将ACK=1的数据包再发送给服务器端以确认服务器端的应答，服务器端收到应答包后通过检查ack是否等于k+1来确认连接是否建立成功。")])]),t._v(" "),_("p",[t._v("当用户关闭标签页或请求完成后，TCP连接会进行“四次挥手”：")]),t._v(" "),_("ul",[_("li",[t._v("（1）由客户端先向服务器端发送FIN=M的指令，随后进入完成等待状态FIN_WAIT_1，表明客户端已经没有再向服务器端发送的数据，但若服务器端此时还有未完成的数据传递，可继续传递数据。")]),t._v(" "),_("li",[t._v("（2）当服务器端收到客户端的FIN报文后，会先发送ack=M+1的确认，告知客户端关闭请求已收到，但可能由于服务器端还有未完成的数据传递，所以请客户端继续等待。")]),t._v(" "),_("li",[t._v("（3）当服务器端确认已完成所有数据传递后，便发送带有FIN=N的报文给客户端，准备关闭连接。")]),t._v(" "),_("li",[t._v("（4）客户端收到FIN=N的报文后可进行关闭操作，但为保证数据正确性，会回传给服务器端一个确认报文ack=N+1，同时服务器端也在等待客户端的最终确认，如果服务器端没有收到报文则会进行重传，只有收到报文后才会真正断开连接。而客户端在发送了确认报文一段时间后，没有收到服务器端任何信息则认为服务器端连接已关闭，也可关闭客户端信息。")])]),t._v(" "),_("h2",{attrs:{id:"_3-前后端交互"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-前后端交互"}},[t._v("#")]),t._v(" 3.前后端交互")]),t._v(" "),_("h3",{attrs:{id:"浏览器缓存"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#浏览器缓存"}},[t._v("#")]),t._v(" 浏览器缓存")]),t._v(" "),_("p",[t._v("在基于HTTP的前后端交互过程中，使用缓存可以使性能得到显著提升。具体的缓存策略分为两种：强缓存和协商缓存。")]),t._v(" "),_("p",[_("strong",[t._v("1. 强制缓存")])]),t._v(" "),_("p",[t._v("控制强制缓存的字段分别是Expires和Cache-Control，其中Cache-Control优先级比Expires高。")]),t._v(" "),_("p",[_("strong",[t._v("Expires")])]),t._v(" "),_("p",[t._v("Expires是HTTP/1.0控制网页缓存的字段，其值为服务器返回该请求结果缓存的到期时间，即再次发起该请求时，如果客户端的时间小于Expires的值时，直接使用缓存结果。")]),t._v(" "),_("p",[t._v("到了HTTP/1.1，Expire已经被Cache-Control替代，原因在于Expires控制缓存的原理是使用客户端的时间与服务端返回的时间做对比，那么如果客户端与服务端的时间因为某些原因（例如时区不同；客户端和服务端有一方的时间不准确）发生误差，那么强制缓存则会直接失效，这样的话强制缓存的存在则毫无意义，那么Cache-Control又是如何控制的呢？")]),t._v(" "),_("p",[_("strong",[t._v("Cache-Control")])]),t._v(" "),_("p",[t._v("在HTTP/1.1中，Cache-Control是最重要的规则，主要用于控制网页缓存，主要取值为：")]),t._v(" "),_("p",[_("strong",[t._v("public：")]),t._v(" 所有内容都将被缓存（客户端和代理服务器都可缓存）")]),t._v(" "),_("p",[_("strong",[t._v("private")]),t._v("：所有内容只有客户端可以缓存，Cache-Control的默认取值")]),t._v(" "),_("p",[_("strong",[t._v("no-cache：")]),t._v(" 客户端缓存内容，但是是否使用缓存则需要经过协商缓存来验证决定")]),t._v(" "),_("p",[_("strong",[t._v("no-store：")]),t._v(" 所有内容都不会被缓存，即不使用强制缓存，也不使用协商缓存")]),t._v(" "),_("p",[_("strong",[t._v("max-age=xxx")]),t._v(" (xxx is numeric)：缓存内容将在xxx秒后失效")]),t._v(" "),_("p",[t._v("max-age=600，意思就是说在600秒内再次发起该请求，则会直接使用缓存结果，强制缓存生效。")]),t._v(" "),_("p",[_("strong",[t._v("缓存位置：")])]),t._v(" "),_("table",[_("thead",[_("tr",[_("th"),t._v(" "),_("th",[t._v("memory cache")]),t._v(" "),_("th",[t._v("disk cache")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("相同点")]),t._v(" "),_("td",[t._v("只能存储一些派生类资源文件")]),t._v(" "),_("td",[t._v("只能存储一些派生类资源文件")])]),t._v(" "),_("tr",[_("td",[t._v("不同点")]),t._v(" "),_("td",[t._v("退出进程时数据会被清除")]),t._v(" "),_("td",[t._v("退出进程时数据不会被清除")])]),t._v(" "),_("tr",[_("td",[t._v("存储资源")]),t._v(" "),_("td",[t._v("一般脚本、字体、图片会存在内存当中")]),t._v(" "),_("td",[t._v("一般非脚本会存在内存当中，如css等")])])])]),t._v(" "),_("p",[_("strong",[t._v("2. 协商缓存")])]),t._v(" "),_("p",[t._v("协商缓存就是强制缓存失效后，浏览器携带缓存标识向服务器发起请求，由服务器根据缓存标识决定是否使用缓存的过程，主要有以下两种情况：")]),t._v(" "),_("p",[t._v("协商缓存的标识也是在响应报文的HTTP头中和请求结果一起返回给浏览器的，控制协商缓存的字段分别有：Last-Modified / If-Modified-Since和Etag / If-None-Match，其中Etag / If-None-Match的优先级比Last-Modified / If-Modified-Since高。")]),t._v(" "),_("p",[_("strong",[t._v("Last-Modified / If-Modified-Since")])]),t._v(" "),_("p",[t._v("Last-Modified是服务器响应请求时，返回该资源文件在服务器最后被修改的时间。if-Modified-Since则是客户端再次发起该请求时，携带上次请求返回的Last-Modified值，通过此字段值告诉服务器该资源上次请求返回的最后被修改时间。服务器收到该请求，发现请求头含有If-Modified-Since字段，则会根据If-Modified-Since的字段值与该资源在服务器的最后被修改时间做对比，若服务器的资源最后被修改时间大于If-Modified-Since的字段值，则重新返回资源，状态码为200；否则则返回304，代表资源无更新，可继续使用缓存文件。")]),t._v(" "),_("p",[t._v("缺点:")]),t._v(" "),_("p",[t._v("短时间内资源发生了改变，Last-Modified 并不会发生变化。")]),t._v(" "),_("p",[t._v("周期性变化。如果这个资源在一个周期内修改回原来的样子了，我们认为是可以使用缓存的，但是 Last-Modified 可不这样认为,因此便有了 ETag。")]),t._v(" "),_("p",[_("strong",[t._v("Etag / If-None-Match")])]),t._v(" "),_("p",[t._v("Etag是服务器响应请求时，返回当前资源文件的一个唯一标识(由服务器生成)。If-None-Match是客户端再次发起该请求时，携带上次请求返回的唯一标识Etag值，通过此字段值告诉服务器该资源上次请求返回的唯一标识值。服务器收到该请求后，发现该请求头中含有If-None-Match，则会根据If-None-Match的字段值与该资源在服务器的Etag值做对比，一致则返回304，代表资源无更新，继续使用缓存文件；不一致则重新返回资源文件，状态码为200。")]),t._v(" "),_("p",[t._v("总结一下：")]),t._v(" "),_("p",[_("img",{attrs:{src:a(570),alt:"总结"}})]),t._v(" "),_("h2",{attrs:{id:"_4-关键路径的渲染"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-关键路径的渲染"}},[t._v("#")]),t._v(" 4. 关键路径的渲染")]),t._v(" "),_("p",[t._v("浏览器渲染页面的整个过程：浏览器会从上到下解析文档：")]),t._v(" "),_("ol",[_("li",[_("p",[t._v("遇见 HTML 标记，调用HTML解析器解析为对应的 token （一个token就是一个标签文本的序列化）并构建 DOM 树（就是一块内存，保存着tokens，建立它们之间的关系）。")])]),t._v(" "),_("li",[_("p",[t._v("遇见 style/link 标记调用相应解析器处理CSS标记，并构建出CSS样式树。")])]),t._v(" "),_("li",[_("p",[t._v("遇见 script 标记 调用javascript引擎 处理script标记、绑定事件、修改DOM树/CSS树等")])]),t._v(" "),_("li",[_("p",[t._v("将 DOM树 与 CSS树 合并成一个渲染树。")])]),t._v(" "),_("li",[_("p",[t._v("根据渲染树来渲染，以计算每个节点的几何信息（这一过程需要依赖GPU）。布局")])]),t._v(" "),_("li",[_("p",[t._v("最终将各个节点绘制到屏幕上。绘制")])])]),t._v(" "),_("h2",{attrs:{id:"参考文章链接"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#参考文章链接"}},[t._v("#")]),t._v(" 参考文章链接：")]),t._v(" "),_("ul",[_("li",[t._v("《web性能权威指南》")]),t._v(" "),_("li",[t._v("《web性能优化》-- 田佳奇")]),t._v(" "),_("li",[_("a",{attrs:{href:"https://blog.csdn.net/qq_41831345/article/details/109146388",target:"_blank",rel:"noopener noreferrer"}},[t._v("彻底搞懂浏览器缓存机制"),_("OutboundLink")],1)]),t._v(" "),_("li",[_("a",{attrs:{href:"https://blog.csdn.net/qq_41831345/article/details/117790383",target:"_blank",rel:"noopener noreferrer"}},[t._v("深入理解性能优化方案"),_("OutboundLink")],1)])])])}),[],!1,null,null,null);s.default=v.exports}}]);